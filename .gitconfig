[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# [core]
#     whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol


[alias]
    # useful aliases for daily gitting.
    # some of this taken from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    # other parts from Janmyr@jayway
    # others still from http://blog.blindgaenger.net/advanced_git_aliases.html
    st = status
    ci = commit
    br = branch
    co = checkout
    df = diff
    lg = log -p
    type = cat-file -t
    dump = cat-file -p
    undo-commit = 'reset --soft HEAD^'
    # will push the current branch only and named branch with `git pub {branch-name}`
    pub = "!f() { git push -u ${1:-origin} `git symbolic-ref HEAD`; }; f" 
    # view changes between fetched changes and HEAD
    changes=!git log --name-status HEAD..
    # add selected parts of the changes in the working directory
    ap = "add --patch"
    # when you have removed a file with `rm`, and really meant `git rm`
    au = "add --update"
    # stashes _everything_ in the working dir. `save` allows for appending a message
    ss = "stash save -u"
    # amends previous commit, reusing the commit message
    amendc = "commit --amend -C HEAD"
    # shows all aliases defined
    alias = "!git config -l | grep alias | cut -c 7-"
    # log me up!
    l = "!git log-hist"
    log-hist = "!git log-pretty --graph"
    log-pretty = "log --pretty='format:%C(blue)%h%C(red)%d%C(yellow) %s %C(green)%an%Creset, %ar'"
    hist = log --pretty=format:\"%h %ad | [%aE]: %s%d\" --graph --date=short
    pr = "pull --rebase"
    # toggle tracking of changes for files
    stoptracking   = update-index --assume-unchanged
    resumetracking  = update-index --no-assume-unchanged
    parkedfiles  = "!git ls-files -v | grep ^h | cut -c 3-"
    # snapshooting using stash
    # will produce a stash named snapshot: Mon Apr 8 12:39:06 BST 2013
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    ignore="!f() { echo $1 >> \"${GIT_PREFIX}.gitignore\"; }; f"
    workprofile = config user.email \"semn@lundbeck.com\"
    l50  = "!f () { git log --abbrev-commit --date=short --pretty=format:'%h%x00%cd%x00%s%x00%an%x00%d' $@ | gawk -F '\\0' '{ printf \"\\033[31m%s\\033[0m \\033[32m%s\\033[0m  %-50s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5 }' | less -R; }; f"
    l80  = "!f () { git log --abbrev-commit --date=short --pretty=format:'%h%x00%cd%x00%s%x00%an%x00%d' $@ | gawk -F '\\0' '{ printf \"\\033[31m%s\\033[0m \\033[32m%s\\033[0m  %-80s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{79}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5 }' | less -R; }; f"
    lg50 = "!f () { git log --graph --color=always --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' $@ | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-50s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5, $6 }' | less -R; }; f"
    lg80 = "!f () { git log --graph --color=always --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' $@ | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-80s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{79}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5, $6 }' | less -R; }; f"

    # http://stackoverflow.com/a/4991675/1448983
    oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    branchdiff = !sh -c \"git diff `git oldest-ancestor`..\"
	branchlog = !sh -c \"git log `git oldest-ancestor`..\"

    tags = "!git for-each-ref --sort=taggerdate --format '%(refname) %(taggerdate)' refs/tags"
    latest = "!git tags | cut -f 3 -d '/' | cut -f 1 -d ' ' | tail -1"
    delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*\\|master||develop' | xargs -n 1 git branch -d"
    hotfix = "!git co -b `git tags | cut -f 3 -d '/' | cut -f 1 -d ' ' | tail -1 | awk 'BEGIN { FS = \".\"};{printf \"hotfix/\" $1 \".\" $2 \".\" $3+1 }'`"
    who = shortlog -s -n --no-merges
    standup = shortlog --since=yesterday
    today = shortlog --since=midnight
    undo = reset HEAD^
    gpush = "!git push 2>&1 | egrep --only-matching '(http.*$)' | xargs firefox"
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
    
[giggle]
    main-window-maximized = false
    main-window-geometry = 718x879+716+19
    history-view-vpane-position = 268
    main-window-view = HistoryView
    file-view-vpane-position = 381
[core]
    editor = emacs -Q -nw
	excludesfile = ~/.gitignore
[user]
	email = steen@manniche.net
    name = Steen Manniche
[diff]
    algorithm = patience

[github]
    user = manniche
[push]
	default = current
[url "https://"]
	insteadOf = git://
    
