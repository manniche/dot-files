[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# [core]
#     whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol



[alias]
    # useful aliases for daily gitting.
    # some of this taken from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    # other parts from Janmyr@jayway
    # others still from http://blog.blindgaenger.net/advanced_git_aliases.html
    st = status
    ci = commit
    br = branch
    co = checkout
    df = diff
    lg = log -p
    type = cat-file -t
    dump = cat-file -p
    # will push the current branch only and named branch with `git pub {branch-name}`
    pub = "!f() { git push -u ${1:-origin} `git symbolic-ref HEAD`; }; f" 
    # view changes between fetched changes and HEAD
    changes=!git log --name-status HEAD..
    # add selected parts of the changes in the working directory
    ap = "add --patch"
    # when you have removed a file with `rm`, and really meant `git rm`
    au = "add --update"
    # stashes _everything_ in the working dir. `save` allows for appending a message
    ss = "stash save -u"
    # amends previous commit, reusing the commit message
    amendc = "commit --amend -C HEAD"
    # shows all aliases defined
    alias = "!git config -l | grep alias | cut -c 7-"
    # log me up!
    l = "!git log-hist"
    log-hist = "!git log-pretty --graph"
    log-pretty = "log --pretty='format:%C(blue)%h%C(red)%d%C(yellow) %s %C(green)%an%Creset, %ar'"
    hist = log --pretty=format:\"%h %ad | [%aE]: %s%d\" --graph --date=short
    pr = "pull --rebase"
    # toggle tracking of changes for files
    stoptracking   = update-index --assume-unchanged
    resumetracking  = update-index --no-assume-unchanged
    parkedfiles  = "!git ls-files -v | grep ^h | cut -c 3-"
    # snapshooting using stash
    # will produce a stash named snapshot: Mon Apr 8 12:39:06 BST 2013
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    ignore=!([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore    


[giggle]
	main-window-maximized = false
	main-window-geometry = 718x879+716+19
	history-view-vpane-position = 268
	main-window-view = HistoryView
	file-view-vpane-position = 381
[core]
	editor = !emacs -nw
[user]
	email = steen@manniche.net
	name = Steen Manniche
[diff]
	algorithm = patience
