set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" plugins
Plugin 'tpope/vim-fugitive'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
"Plugin 'altercation/vim-colors-solarized'
Plugin 'agude/vim-eldar'
Plugin 'viis/vim-bclose'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-surround'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'nvie/vim-flake8'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-unimpaired'
Plugin 'MattesGroeger/vim-bookmarks'
Plugin 'tpope/vim-speeddating'
Plugin 'jceb/vim-orgmode'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

syntax on

" Map key to toggle opt
function! MapToggle(key, opt)
  let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
  exec 'nnoremap '.a:key.' '.cmd
  exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command! -nargs=+ MapToggle call MapToggle(<f-args>)


" color theme
set t_Co=256
"set background=light
set background=dark
"colorscheme solarized
colorscheme eldar

" use UTF-8
set encoding=utf-8

" use , as the leader
let mapleader = ","

" Write backup files to backup dir
set backupdir=~/.vim/backups//

" folding
set foldmethod=indent
set foldlevel=99
let g:SimpylFold_docstring_preview=1

" tabs
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab                   " replace tabs with ${tabstop} spaces
set autoindent

" flag unneccessary whitespace
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" visual help
":au FocusLost * :set number
":au FocusGained * :set relativenumber
set ruler
set listchars=tab:>-,trail:-
set list
set colorcolumn=120
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set nobackup
set nowritebackup
set directory=/tmp//            " prepend(^=) $HOME/.tmp/ to default path; use full path as backup filename(//)
set noswapfile                  "

" search
set hlsearch                    " highlight search
set incsearch                   " show matches while typing
set ignorecase                  " be case insensitive when searching
set smartcase                   " be case sensitive when input has a capital letter

" line breaks
set nowrap
set formatoptions=l

set wildmenu
set showcmd
map Y y$

"ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']

" set cursorcolumn
nnoremap ; :
nnoremap : ;

" remap j and k to scroll by visual lines
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" emacs format lines to textwrap http://vim.1045645.n5.nabble.com/Opposite-of-lt-shift-gt-J-td1163281.html
nnoremap Q gqap
vnoremap Q gq

" remap ctrl+arrows to move between buffers
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

" Ctrl-h to escape insert mode
inoremap <C-h> <ESC>

"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR>

" Insert linebreak from normal mode
nnoremap <C-J> i<CR><Esc>k$

" map up/down to C-p/C-n in command line mode
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" increase command history
set history=200

" NerdTree
nnoremap <silent> <Leader>n :NERDTreeToggle<CR>

" bclose
nnoremap <silent> <Leader>x :Bclose<CR>

" buffers
set hidden
nnoremap <silent> <Leader>b :b#<CR>
nnoremap <silent> <Leader>j :bn<CR>
nnoremap <silent> <Leader>k :bp<CR>

" search for selected text with //
vnoremap // y/<C-R>"<CR>"

" insert space or a single character from normal mode http://vim.wikia.com/wiki/Insert_a_single_character
nnoremap <space> i<space><esc>
nnoremap s :exec "normal i".nr2char(getchar())."\e"<CR>
nnoremap S :exec "normal a".nr2char(getchar())."\e"<CR>

" Use leader k/j to move text lines up or down
nnoremap <leader>j :m .+1<CR>==
nnoremap <leader>k :m .-2<CR>==

" Overwrite marked text
vmap r "_dP

" enable mouse
set mouse=a

" set textwidth for modern screens
autocmd FileType * setlocal textwidth=119 formatoptions+=t

" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:ycm_server_python_interpreter = 'python3'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_pylint_post_args='--disable=import-error'
let g:syntastic_mode_map = {'passive_filetypes': ['perl']}
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['python3 -m flake8.run']

" YouCompleteMe settings - Requires python support
let g:ycm_autoclose_preview_window_after_completion=1
noremap <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>


" split windows
noremap <Tab> <C-W>w
noremap <Bar> <C-W>v<C-W><Right>
noremap - <C-W>s<C-W><Down>


""" handle whitespace
function! ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

command! -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command! -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
nnoremap <F12>     :ShowSpaces 1<CR>
nnoremap <S-F12>   m`:TrimSpaces<CR>``
vnoremap <S-F12>   :TrimSpaces<CR>
""" end handle whitespace

" Python settings, PEP8
au BufNewFile,BufRead *.py:
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=120
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

let python_highlight_all=1
syntax on

